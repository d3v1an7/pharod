package main

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"regexp"
)

const resolverConfigStr = `# Carefully generated by pharod
nameserver 127.0.0.1
port 49152
`
const resolverConfigPath = "/etc/resolver/pharod"

const resetLocationScript = `# Borrowed from pow's install.sh
set -e
location=$(networksetup -getcurrentlocation)
templocation="pharod$$"
networksetup -createlocation "$templocation" >/dev/null 2>&1
networksetup -switchtolocation "$templocation" >/dev/null 2>&1
networksetup -switchtolocation "$location" >/dev/null 2>&1
networksetup -deletelocation "$templocation" >/dev/null 2>&1
`
const newPowRuleFormat = `table <powhosts> { 0/0, 127.0.0.1, !127/0 }
rdr pass proto tcp from any to <powhosts> port {80,%[1]s} -> 127.0.0.1 port %[1]s
`

var powRulePattern = regexp.MustCompile(`(?m)^rdr pass inet proto tcp from any to any port = (\d+)`)

func install() (err error) {
	resolverConfig := []byte(resolverConfigStr)

	currentConfig, err := ioutil.ReadFile(resolverConfigPath)
	if err != nil || sha256.Sum256(currentConfig) != sha256.Sum256(resolverConfig) {
		log.Println("Resolver config needs updating; writing new one now")
		err = ioutil.WriteFile(resolverConfigPath, resolverConfig, 0644)
		if err != nil {
			return err
		}

		log.Println("Prodding OS X to make it aware of new resolver settings")
		err = runCommandOutStdout(exec.Command(
			"sh", "-c", resetLocationScript))
		if err != nil {
			return err
		}

	}

	// Reconfigure Pow rules if present
	powRules, err := exec.Command("pfctl", "-a", "com.apple/250.PowFirewall", "-s", "nat").Output()
	if err != nil {
		return pfctlError(err)
	}

	if m := powRulePattern.FindAllStringSubmatch(string(powRules), 2); len(m) > 0 {
		log.Println("Reconfiguring Pow firewall to allow Pharod listeners on port 80")
		powPort := ""
		for _, ml := range m {
			if ml[1] != "80" {
				powPort = ml[1]
				break
			}
		}
		if powPort == "" {
			return fmt.Errorf("unable to find Pow port; it's probably changed. Report a pharod bug please!")
		}

		newPowRules := fmt.Sprintf(newPowRuleFormat, powPort)

		pfctl := exec.Command("pfctl", "-a", "com.apple/250.PowFirewall",
			"-Ef", "-")
		pfctlIn, err := pfctl.StdinPipe()
		if err != nil {
			return pfctlError(err)
		}

		err = pfctl.Start()
		if err != nil {
			return pfctlError(err)
		}

		_, err = pfctlIn.Write([]byte(newPowRules))
		if err != nil {
			return pfctlError(err)
		}

		err = pfctlIn.Close()
		if err != nil {
			return pfctlError(err)
		}

		err = pfctl.Wait()
		if err != nil {
			return pfctlError(err)
		}
	}

	return nil
}

func runCommandOutStdout(cmd *exec.Cmd) error {
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()
}

func pfctlError(errIn error) error {
	return fmt.Errorf("pfctl: %s", errIn)
}
